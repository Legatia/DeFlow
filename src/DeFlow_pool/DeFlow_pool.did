type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : float64; Err : text };
type Result_2 = variant { Ok : PoolState; Err : text };
type Result_3 = variant { Ok : FinancialOverview; Err : text };
type Result_4 = variant { Ok : vec ArbitrageOpportunity; Err : text };

type ChainId = variant {
  Bitcoin;
  Ethereum;
  Arbitrum;
  Optimism;
  Polygon;
  Base;
  Solana;
  Avalanche;
};

type Asset = variant {
  BTC;
  ETH;
  USDC;
  USDT;
  DAI;
  SOL;
  MATIC;
  AVAX;
};

type PoolPhase = variant {
  Bootstrapping : record {
    started_at : nat64;
    target_liquidity : vec record { Asset; nat64 };
    estimated_completion : nat64;
  };
  Active : record {
    activated_at : nat64;
    min_reserve_ratio : float64;
    max_utilization : float64;
  };
  Emergency : record {
    paused_at : nat64;
    reason : text;
  };
};

type LiquidityReserve = record {
  total_amount : nat64;
  fee_contributed_amount : nat64;
  last_updated : nat64;
  daily_growth_rate : float64;
  utilization_rate : float64;
};

type TeamRole = variant {
  Owner;
  SeniorManager;
  OperationsManager;
  TechManager;
  Developer;
};

type TeamChangeType = variant {
  AddMember;
  RemoveMember;
  PromoteMember;
  DemoteMember;
};

type TeamChangeRequest = record {
  request_type : TeamChangeType;
  requester : principal;
  target_principal : principal;
  new_role : TeamRole;
  requires_owner_approval : bool;
  timestamp : nat64;
  approved : bool;
  request_id : nat64;
};

type TeamHierarchy = record {
  owner_principal : principal;
  senior_managers : vec principal;
  operations_managers : vec principal;
  tech_managers : vec principal;
  developers : vec principal;
  pending_approvals : vec TeamChangeRequest;
  next_request_id : nat64;
  last_team_change : nat64;
  last_bootstrap_change : nat64;
  last_configuration_change : nat64;
  last_financial_operation : nat64;
};

type TokenBalance = record {
  asset : Asset;
  amount : nat64;
  last_updated : nat64;
  usd_value_at_time : float64;
};

type MemberEarnings = record {
  balances : vec record { Asset; TokenBalance };
  total_usd_value : float64;
  last_distribution_time : nat64;
  withdrawal_addresses : vec record { ChainId; text };
};

type EarningsAllocation = variant {
  Percentage : float64;
  FixedMonthlyUSD : float64;
  FixedPerTransaction : float64;
};

type MemberEarningsConfig = record {
  allocation : EarningsAllocation;
  role : TeamRole;
  is_active : bool;
  vesting_cliff_months : nat64;
  vesting_period_months : nat64;
  joined_timestamp : nat64;
  last_modified_by : principal;
  last_modified_time : nat64;
};

type DevTeamBusinessModel = record {
  team_hierarchy : TeamHierarchy;
  monthly_subscription_revenue : float64;
  monthly_transaction_fees : float64;
  monthly_enterprise_revenue : float64;
  monthly_operating_costs : float64;
  team_member_earnings : vec record { principal; MemberEarnings };
  total_distributed_profits : float64;
  emergency_fund : float64;
  reinvestment_fund : float64;
  minimum_distribution_threshold : float64;
  distribution_frequency : nat64;
  last_distribution_time : nat64;
  member_earnings_config : vec record { principal; MemberEarningsConfig };
};

type PoolState = record {
  phase : PoolPhase;
  reserves : vec record { ChainId; vec record { Asset; LiquidityReserve } };
  dev_team_business : DevTeamBusinessModel;
  total_liquidity_usd : float64;
  monthly_volume : float64;
  fee_collection_rate : float64;
};

type TreasuryTransactionType = variant {
  SubscriptionPayment;
  TransactionFeeRevenue;
  WithdrawalToTeam;
  TransferToCold;
  TransferToWarm;
  Rebalancing;
  EmergencyWithdrawal;
  PaymentReceived;
  RefundIssued;
};

type TransactionStatus = variant {
  Pending;
  Confirmed;
  Failed;
  RequiresApproval;
  Cancelled;
};

type TreasuryTransaction = record {
  id : text;
  transaction_type : TreasuryTransactionType;
  chain : text;
  asset : text;
  amount : float64;
  amount_usd : float64;
  from_address : text;
  to_address : text;
  tx_hash : opt text;
  status : TransactionStatus;
  timestamp : nat64;
  initiated_by : principal;
  notes : opt text;
};

type FinancialOverview = record {
  total_liquidity : float64;
  monthly_pool_growth : float64;
  bootstrap_progress : float64;
  monthly_revenue : float64;
  total_team_pending : float64;
  emergency_fund : float64;
  pool_health : text;
  business_health : text;
};

type ArbitrageOpportunity = record {
  asset_pair : record { text; text };
  buy_chain : ChainId;
  sell_chain : ChainId;
  price_difference : float64;
  expected_profit : float64;
  required_capital : float64;
  confidence_score : float64;
};

service : {
  // Pool State Management
  "get_pool_state" : () -> (Result_2) query;
  "get_financial_overview" : () -> (Result_3) query;
  "get_bootstrap_progress" : () -> (float64) query;
  
  // Fee Collection & Business Model
  "deposit_fee" : (Asset, nat64, text, principal) -> (Result);
  "process_subscription_payment" : (principal, float64) -> (Result);
  "withdraw_dev_earnings" : () -> (Result_1);
  "get_dev_earnings" : (principal) -> (float64) query;
  
  // Liquidity Management
  "add_liquidity" : (ChainId, Asset, nat64) -> (Result);
  "withdraw_for_execution" : (Asset, nat64) -> (Result);
  "get_asset_balance" : (ChainId, Asset) -> (nat64) query;
  "get_total_liquidity_usd" : () -> (float64) query;
  
  // Cross-Chain Operations
  "detect_arbitrage_opportunities" : () -> (Result_4);
  "execute_cross_chain_trade" : (ChainId, ChainId, Asset, nat64) -> (Result);
  
  // Pool Configuration
  "set_bootstrap_targets" : (vec record { Asset; nat64 }) -> (Result);
  "activate_pool" : () -> (Result);
  "emergency_pause" : (text) -> (Result);
  
  // Chain Fusion Integration
  "initialize_chain_fusion" : () -> (Result);
  
  // Analytics
  "get_pool_analytics" : () -> (text) query;
  "get_chain_distribution" : () -> (vec record { ChainId; float64 }) query;
  
  // Treasury Management
  "get_treasury_transactions" : (opt nat64) -> (vec TreasuryTransaction) query;
  
  // Earnings Management (Owner/Senior Manager only)
  "set_member_earnings" : (principal, EarningsAllocation) -> (Result);
  "update_member_role" : (principal, TeamRole) -> (Result);
  "activate_member_earnings" : (principal, bool) -> (Result);
  "get_member_earnings_config" : (principal) -> (opt MemberEarningsConfig) query;
  "get_all_earnings_config" : () -> (vec record { principal; MemberEarningsConfig }) query;
}